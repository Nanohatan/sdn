<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>授業動画</title>
    <link rel="stylesheet" href="http://192.168.98.25:8080/static/css/class_page.css">
    <link rel="stylesheet" href="http://192.168.98.25:8080/static/css/navibar.css">
    <script type="text/javascript" src="http://192.168.98.25:8080/static/js/class_page.js"></script>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<div class="navbar">
    <a href="/auth/login">時間割</a>
    <a href="/search">授業検索</a>
    <% if (role) { %>
        <a href="/upload">アップロード</a>
    <% } %>
</div>

<h1><%= className %></h1>
<div class="row">
    <div class="video_display column" style="border-style: solid; border-color: black; ">
        <h2><%= videoNumber %> <%= videoTitle %></h2>
        <video id="video_play" controls preload="none"></video>
    </div>
    <div class="chat_display column" style="border-style: solid; border-color: red; ">
        <h2 onclick="clickModoru('<%= movie_id %>')" id="<%= movie_id %>">←戻る</h2>
        <script>function clickModoru(id) {
                callChatInfoAndCreateChat(id);
                changeParentsID(id);
                var now_key = $.cookie("now_id");
                socket.emit('leave', now_key);
                socket.emit('join', id);
                $.removeCookie("now_key");
                $.cookie("now_id", id);
            }</script>
        <div class="chats" id="chats" style="height: 500px; border-style: solid; border-color:red; overflow: scroll;">
        </div>
    </div>
</div>
<div class="reaction-bar">
    <div class="video-progress">
        <div id="progress"></div>
        <div id="pointbox"></div>
    </div>

    <!--     コメント+しおり機能予定地 -->
    <form id="form" method="GET">
        <label for="reaction-type">
            <select class="select-css" name="reaction_type" id="reaction-type" onchange="changeButtonName()">
                <option selected value="other">その他</option>
                <option value="shiori">しおり</option>
            </select>
        </label>
        <div class="reaction-message">
            <input id="input" type="text" name="msg">
            <input id="reaction-submit-botton" type="submit" value="チャットを送信" style="width: 20%; right:5%;">
        </div>
    </form>
</div>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>
<script>
    // 動画のload場所（基本変更しない）
    var video = document.getElementById('video_play');
    if (Hls.isSupported()) {
        var hls = new Hls();
        hls.loadSource(" <%= place %> ");
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED, function () {
            video.play();
        });
    }

    // 1/12 書きました！
    // soket.ioでの動作
    var socket = io();
    var form = document.getElementById('form');
    var input = document.getElementById('input');
    var reaction = document.getElementById('reaction-type');
    const sub = document.getElementById('reaction-submit-botton');
    var shiori_time = document.getElementById('progress');
    //「送信する」ボタンが押された時の動作
    form.addEventListener('submit', function (e) {
        e.preventDefault();
        // チャットの種類が「しおり」だったらしおりを挟む動作を入れる
        if (reaction.value == "shiori") {
            shioriFunction()
        }
        if (input.value && reaction.value) {
            var url = window.location.href;
            var url_array = url.split("/");
            var id = url_array[url_array.length - 1]
            // index.jsのsocket.on('chat message')に移動
            var isParent = false;
            if (sub.id == id) {
                isParent = true;
            }
            const video = document.getElementById('video_play');
            var fullTime = video.duration;
            var nowTime = video.currentTime;
            var shiori_time = (nowTime / fullTime) * 100 - 1.5;
            var now_key = $.cookie("now_id");
            socket.emit('leave', now_key);
            socket.emit('join', sub.id);
            $.removeCookie("now_key");
            $.cookie("now_id", sub.id);
            socket.emit('chat message', input.value, reaction.value, sub.id, isParent, shiori_time, nowTime);
            input.value = '';
        }
    });


    load_flag = true;

    if (load_flag) {
        var url = window.location.href;
        var url_array = url.split("/");
        var id = url_array[url_array.length - 1];
        sub.id = id;

        $.cookie("now_id", id);
        socket.emit('join', id);
        load_flag = false;
        console.log("【読み込み完了】" );
    }



    // 全体に向けて更新されたチャットを追加
    socket.on('chat message', function (msg, reaction, its_id, isParent, shiori_time, nowTime) {
        createChatFromData(msg, reaction, its_id, isParent, shiori_time, nowTime);
        console.log("ブラウザにきてるんだ……");
    });

    function createChatFromData(msg, reaction, its_id, isParent, shiori_time, nowTime) {
        let newDiv = document.createElement('div');
        newDiv.className = "topic";
        newDiv.id = id._id;
        newDiv.id = its_id;
        let typeDiv = document.createElement('div');
        if (reaction == "shiori" && isParent) {
            newDiv.className = "topic shiori";
            var img = document.createElement('img');
            img.src = "http://192.168.98.25:8080/static/img/talk_icon_before.svg";
            typeDiv.appendChild(img);
            newDiv.addEventListener("click", function () {
                callChatInfoAndCreateChat(newDiv.id);
                changeParentsID(newDiv.id, sub);
                var now_key = $.cookie("now_id");
                socket.emit('leave', now_key);
                socket.emit('join', newDiv.id);
                $.removeCookie("now_key");
                $.cookie("now_id", newDiv.id);
            }, false);
            var node = document.createElement("img");
            node.src = "../static/aicon.png";
            node.style.cssText = "left:" + shiori_time + "%";
            node.alt = nowTime;
            node.className = 'point';
            document.getElementById("pointbox").appendChild(node);
        }
        ;
        cDiv.appendChild(newDiv);
        typeDiv.className = "topic-type";
        let typePara = document.createElement('p');
        typeDiv.appendChild(typePara);
        newDiv.appendChild(typeDiv);
        let msgDiv = document.createElement('div');
        msgDiv.className = "topic-message";
        let msgPara = document.createElement('p');
        msgPara.textContent = msg;
        msgDiv.appendChild(msgPara);
        newDiv.appendChild(msgDiv);
    }


    var url = window.location.href;
    var url_array = url.split("/");
    var id = url_array[url_array.length - 1]
    let cDiv = document.getElementsByClassName("chats")[0];
    //ページについたとき、表示されるチャット
    $.ajax({
        url: 'http://192.168.98.25:8080/search/chats',
        data: {"id": id},
        type: 'GET',
        success: function (data) {
            createChatFromJsondata(data);
        }
    });


    video.ontimeupdate = function () {
        var percentage = (video.currentTime / video.duration) * 100;
        $("#progress").css("width", percentage + "%");
    };
    $("#progress").on("click", function (e) {
        var offset = $(this).offset();
        var left = (e.pageX - offset.left);
        var totalWidth = $("#progress").width();
        var percentage = (left / totalWidth);
        var vidTime = video.duration * percentage;
        video.currentTime = vidTime;
    });

    function setTime(t) {
        console.log(t);
        video.currentTime = t;
    }

    function shioriFunction() {
        const video = document.getElementById('video_play');
        var fullTime = video.duration; // 動画全体の時間
        var nowTime = video.currentTime; // 現在の再生時間
        var setPos = (nowTime / fullTime) * 100 - 1.5; // 全体に対する現在の位置
        var node = document.createElement("img");
        node.src = "../static/aicon.png";
        node.style.cssText = "left:" + setPos + "%";
        node.alt = nowTime;
        node.className = 'point';
        document.getElementById("pointbox").appendChild(node);
    }

    var point = document.querySelector('#pointbox');
    point.addEventListener('click', function (ev) {
        setTime(ev.target.alt);
    }, false);

    function createChatFromJsondata(data) {
        data.forEach(function (jd) {
            createChatFromData(jd.msg, jd.msg_type, jd.its_id, jd.isParent, jd.shiori_time, jd.video_time);
        })
    }

    function callChatInfoAndCreateChat(id) {
        var el = document.querySelector('.chats')
        el.innerHTML = "";
        $.ajax({
            url: 'http://192.168.98.25:8080/search/chats',
            data: {"id": id},
            type: 'GET',
            success: function (data) {
                console.log("call", data);
                createChatFromJsondata(data);
            }
        });
    }

    function changeParentsID(p_id) {
        sub.id = p_id;
    }
</script>

</body>
</html>
